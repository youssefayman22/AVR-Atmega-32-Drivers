
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000de8  2**0
                  ALLOC
  2 .stab         0000132c  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000089a  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_1>
   8:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <__vector_2>
   c:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 b8 06 	jmp	0xd70	; 0xd70 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "EXTI_INTERFACE.h"

void LED(void);

void main(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPINDirection(DIO_PORTA, DIO_PIN0, DIO_PIN_OUTPUT);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_u8SetPINDirection>
	DIO_u8SetPINDirection(DIO_PORTB, DIO_PIN2, DIO_PIN_INPUT);// pull up activation
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_u8SetPINDirection>
	DIO_u8SetPINValue(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH); // pull up activation
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	0e 94 10 02 	call	0x420	; 0x420 <DIO_u8SetPINValue>

	while(1){

	EXTI_InitINT2(EXTI_FallingEdge, &LED);
  a2:	2a e5       	ldi	r18, 0x5A	; 90
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	b9 01       	movw	r22, r18
  aa:	0e 94 df 05 	call	0xbbe	; 0xbbe <EXTI_InitINT2>
	GI_VidEnableGlobalInterrupt();
  ae:	0e 94 9c 06 	call	0xd38	; 0xd38 <GI_VidEnableGlobalInterrupt>
  b2:	f7 cf       	rjmp	.-18     	; 0xa2 <main+0x26>

000000b4 <LED>:
}
}
void LED(void){
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62

DIO_u8SetPINValue(DIO_PORTA, DIO_PIN0, DIO_PIN_HIGH);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	0e 94 10 02 	call	0x420	; 0x420 <DIO_u8SetPINValue>
}
  c6:	cf 91       	pop	r28
  c8:	df 91       	pop	r29
  ca:	08 95       	ret

000000cc <DIO_u8SetPortDirection>:
#include "DIO_INTERFACE.h"
#include "REGISTERS.h"


DIO_ERROR_STATUS DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8PortDirection)
{
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	00 d0       	rcall	.+0      	; 0xd2 <DIO_u8SetPortDirection+0x6>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <DIO_u8SetPortDirection+0x8>
  d4:	0f 92       	push	r0
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	8a 83       	std	Y+2, r24	; 0x02
  dc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_Status = DIO_NO_ERROR;
  de:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8PortDirection != DIO_PORT_INPUT) || (Copy_u8PortDirection != DIO_PORT_OUTPUT)){
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	88 23       	and	r24, r24
  e4:	19 f4       	brne	.+6      	; 0xec <DIO_u8SetPortDirection+0x20>
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f0       	breq	.+6      	; 0xf2 <DIO_u8SetPortDirection+0x26>

		Error_Status = DIO_DIRECTION_ERROR;
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	35 c0       	rjmp	.+106    	; 0x15c <DIO_u8SetPortDirection+0x90>
	}
	else{


		switch(Copy_u8Port){
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3d 83       	std	Y+5, r19	; 0x05
  fa:	2c 83       	std	Y+4, r18	; 0x04
  fc:	8c 81       	ldd	r24, Y+4	; 0x04
  fe:	9d 81       	ldd	r25, Y+5	; 0x05
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	91 05       	cpc	r25, r1
 104:	d1 f0       	breq	.+52     	; 0x13a <DIO_u8SetPortDirection+0x6e>
 106:	2c 81       	ldd	r18, Y+4	; 0x04
 108:	3d 81       	ldd	r19, Y+5	; 0x05
 10a:	22 30       	cpi	r18, 0x02	; 2
 10c:	31 05       	cpc	r19, r1
 10e:	2c f4       	brge	.+10     	; 0x11a <DIO_u8SetPortDirection+0x4e>
 110:	8c 81       	ldd	r24, Y+4	; 0x04
 112:	9d 81       	ldd	r25, Y+5	; 0x05
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	61 f0       	breq	.+24     	; 0x130 <DIO_u8SetPortDirection+0x64>
 118:	1f c0       	rjmp	.+62     	; 0x158 <DIO_u8SetPortDirection+0x8c>
 11a:	2c 81       	ldd	r18, Y+4	; 0x04
 11c:	3d 81       	ldd	r19, Y+5	; 0x05
 11e:	22 30       	cpi	r18, 0x02	; 2
 120:	31 05       	cpc	r19, r1
 122:	81 f0       	breq	.+32     	; 0x144 <DIO_u8SetPortDirection+0x78>
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	9d 81       	ldd	r25, Y+5	; 0x05
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	91 05       	cpc	r25, r1
 12c:	81 f0       	breq	.+32     	; 0x14e <DIO_u8SetPortDirection+0x82>
 12e:	14 c0       	rjmp	.+40     	; 0x158 <DIO_u8SetPortDirection+0x8c>

		case DIO_PORTA:
			DDRA = Copy_u8PortDirection;
 130:	ea e3       	ldi	r30, 0x3A	; 58
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	80 83       	st	Z, r24
 138:	11 c0       	rjmp	.+34     	; 0x15c <DIO_u8SetPortDirection+0x90>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8PortDirection;
 13a:	e7 e3       	ldi	r30, 0x37	; 55
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	80 83       	st	Z, r24
 142:	0c c0       	rjmp	.+24     	; 0x15c <DIO_u8SetPortDirection+0x90>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8PortDirection;
 144:	e4 e3       	ldi	r30, 0x34	; 52
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
 14c:	07 c0       	rjmp	.+14     	; 0x15c <DIO_u8SetPortDirection+0x90>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8PortDirection;
 14e:	e1 e3       	ldi	r30, 0x31	; 49
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	80 83       	st	Z, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPortDirection+0x90>
			break;
		default: Error_Status = DIO_PORT_ERROR;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	89 83       	std	Y+1, r24	; 0x01

		}
	}
	return Error_Status;
 15c:	89 81       	ldd	r24, Y+1	; 0x01
}
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <DIO_u8SetPINDirection>:


DIO_ERROR_STATUS DIO_u8SetPINDirection(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8PinDirection)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <DIO_u8SetPINDirection+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <DIO_u8SetPINDirection+0x8>
 176:	00 d0       	rcall	.+0      	; 0x178 <DIO_u8SetPINDirection+0xa>
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	8a 83       	std	Y+2, r24	; 0x02
 17e:	6b 83       	std	Y+3, r22	; 0x03
 180:	4c 83       	std	Y+4, r20	; 0x04

	u8 Error_Status = DIO_NO_ERROR;
 182:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin <= DIO_PIN7) && (Copy_u8Pin >= DIO_PIN0)){
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_u8SetPINDirection+0x1e>
 18a:	ed c0       	rjmp	.+474    	; 0x366 <DIO_u8SetPINDirection+0x1f8>

		switch(Copy_u8Port){
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3e 83       	std	Y+6, r19	; 0x06
 194:	2d 83       	std	Y+5, r18	; 0x05
 196:	8d 81       	ldd	r24, Y+5	; 0x05
 198:	9e 81       	ldd	r25, Y+6	; 0x06
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_u8SetPINDirection+0x34>
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <DIO_u8SetPINDirection+0xc6>
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	2c f4       	brge	.+10     	; 0x1b6 <DIO_u8SetPINDirection+0x48>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	71 f0       	breq	.+28     	; 0x1d0 <DIO_u8SetPINDirection+0x62>
 1b4:	d5 c0       	rjmp	.+426    	; 0x360 <DIO_u8SetPINDirection+0x1f2>
 1b6:	2d 81       	ldd	r18, Y+5	; 0x05
 1b8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_u8SetPINDirection+0x54>
 1c0:	6b c0       	rjmp	.+214    	; 0x298 <DIO_u8SetPINDirection+0x12a>
 1c2:	8d 81       	ldd	r24, Y+5	; 0x05
 1c4:	9e 81       	ldd	r25, Y+6	; 0x06
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	91 05       	cpc	r25, r1
 1ca:	09 f4       	brne	.+2      	; 0x1ce <DIO_u8SetPINDirection+0x60>
 1cc:	97 c0       	rjmp	.+302    	; 0x2fc <DIO_u8SetPINDirection+0x18e>
 1ce:	c8 c0       	rjmp	.+400    	; 0x360 <DIO_u8SetPINDirection+0x1f2>

		case DIO_PORTA:
			if(Copy_u8PinDirection == DIO_PIN_OUTPUT){
 1d0:	8c 81       	ldd	r24, Y+4	; 0x04
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	a1 f4       	brne	.+40     	; 0x1fe <DIO_u8SetPINDirection+0x90>
				SetBit(DDRA,Copy_u8Pin);
 1d6:	aa e3       	ldi	r26, 0x3A	; 58
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	ea e3       	ldi	r30, 0x3A	; 58
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 2e       	mov	r0, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_u8SetPINDirection+0x86>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_u8SetPINDirection+0x82>
 1f8:	84 2b       	or	r24, r20
 1fa:	8c 93       	st	X, r24
 1fc:	b6 c0       	rjmp	.+364    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else if(Copy_u8PinDirection == DIO_PIN_INPUT){
 1fe:	8c 81       	ldd	r24, Y+4	; 0x04
 200:	88 23       	and	r24, r24
 202:	a9 f4       	brne	.+42     	; 0x22e <DIO_u8SetPINDirection+0xc0>
				ClrBit(DDRA,Copy_u8Pin);
 204:	aa e3       	ldi	r26, 0x3A	; 58
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	ea e3       	ldi	r30, 0x3A	; 58
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPINDirection+0xb4>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPINDirection+0xb0>
 226:	80 95       	com	r24
 228:	84 23       	and	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	9e c0       	rjmp	.+316    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_DIRECTION_ERROR;
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	89 83       	std	Y+1, r24	; 0x01
 232:	9b c0       	rjmp	.+310    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
		case DIO_PORTB:
			if(Copy_u8PinDirection == DIO_PIN_OUTPUT){
 234:	8c 81       	ldd	r24, Y+4	; 0x04
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	a1 f4       	brne	.+40     	; 0x262 <DIO_u8SetPINDirection+0xf4>
				SetBit(DDRB,Copy_u8Pin);
 23a:	a7 e3       	ldi	r26, 0x37	; 55
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e7 e3       	ldi	r30, 0x37	; 55
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_u8SetPINDirection+0xea>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_u8SetPINDirection+0xe6>
 25c:	84 2b       	or	r24, r20
 25e:	8c 93       	st	X, r24
 260:	84 c0       	rjmp	.+264    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else if(Copy_u8PinDirection == DIO_PIN_INPUT){
 262:	8c 81       	ldd	r24, Y+4	; 0x04
 264:	88 23       	and	r24, r24
 266:	a9 f4       	brne	.+42     	; 0x292 <DIO_u8SetPINDirection+0x124>
				ClrBit(DDRB,Copy_u8Pin);
 268:	a7 e3       	ldi	r26, 0x37	; 55
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e7 e3       	ldi	r30, 0x37	; 55
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	48 2f       	mov	r20, r24
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 2e       	mov	r0, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_u8SetPINDirection+0x118>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_u8SetPINDirection+0x114>
 28a:	80 95       	com	r24
 28c:	84 23       	and	r24, r20
 28e:	8c 93       	st	X, r24
 290:	6c c0       	rjmp	.+216    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_DIRECTION_ERROR;
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	69 c0       	rjmp	.+210    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
		case DIO_PORTC:
			if(Copy_u8PinDirection == DIO_PIN_OUTPUT){
 298:	8c 81       	ldd	r24, Y+4	; 0x04
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	a1 f4       	brne	.+40     	; 0x2c6 <DIO_u8SetPINDirection+0x158>
				SetBit(DDRC,Copy_u8Pin);
 29e:	a4 e3       	ldi	r26, 0x34	; 52
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	e4 e3       	ldi	r30, 0x34	; 52
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	48 2f       	mov	r20, r24
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 2e       	mov	r0, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_u8SetPINDirection+0x14e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_u8SetPINDirection+0x14a>
 2c0:	84 2b       	or	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	52 c0       	rjmp	.+164    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else if(Copy_u8PinDirection == DIO_PIN_INPUT){
 2c6:	8c 81       	ldd	r24, Y+4	; 0x04
 2c8:	88 23       	and	r24, r24
 2ca:	a9 f4       	brne	.+42     	; 0x2f6 <DIO_u8SetPINDirection+0x188>
				ClrBit(DDRC,Copy_u8Pin);
 2cc:	a4 e3       	ldi	r26, 0x34	; 52
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	e4 e3       	ldi	r30, 0x34	; 52
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	48 2f       	mov	r20, r24
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 2e       	mov	r0, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_u8SetPINDirection+0x17c>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	0a 94       	dec	r0
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_u8SetPINDirection+0x178>
 2ee:	80 95       	com	r24
 2f0:	84 23       	and	r24, r20
 2f2:	8c 93       	st	X, r24
 2f4:	3a c0       	rjmp	.+116    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_DIRECTION_ERROR;
 2f6:	84 e0       	ldi	r24, 0x04	; 4
 2f8:	89 83       	std	Y+1, r24	; 0x01
 2fa:	37 c0       	rjmp	.+110    	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
		case DIO_PORTD:
			if(Copy_u8PinDirection == DIO_PIN_OUTPUT){
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	a1 f4       	brne	.+40     	; 0x32a <DIO_u8SetPINDirection+0x1bc>
				SetBit(DDRD,Copy_u8Pin);
 302:	a1 e3       	ldi	r26, 0x31	; 49
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	e1 e3       	ldi	r30, 0x31	; 49
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	48 2f       	mov	r20, r24
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	28 2f       	mov	r18, r24
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 2e       	mov	r0, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8SetPINDirection+0x1b2>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	0a 94       	dec	r0
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8SetPINDirection+0x1ae>
 324:	84 2b       	or	r24, r20
 326:	8c 93       	st	X, r24
 328:	20 c0       	rjmp	.+64     	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else if(Copy_u8PinDirection == DIO_PIN_INPUT){
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	88 23       	and	r24, r24
 32e:	a9 f4       	brne	.+42     	; 0x35a <DIO_u8SetPINDirection+0x1ec>
				ClrBit(DDRD,Copy_u8Pin);
 330:	a1 e3       	ldi	r26, 0x31	; 49
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	e1 e3       	ldi	r30, 0x31	; 49
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	48 2f       	mov	r20, r24
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	28 2f       	mov	r18, r24
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 2e       	mov	r0, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_u8SetPINDirection+0x1e0>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_u8SetPINDirection+0x1dc>
 352:	80 95       	com	r24
 354:	84 23       	and	r24, r20
 356:	8c 93       	st	X, r24
 358:	08 c0       	rjmp	.+16     	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_DIRECTION_ERROR;
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	05 c0       	rjmp	.+10     	; 0x36a <DIO_u8SetPINDirection+0x1fc>
				break;
			}
		default: Error_Status = DIO_PORT_ERROR;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_u8SetPINDirection+0x1fc>

		}
	}
	else{

		Error_Status = DIO_PIN_ERROR;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
 36a:	89 81       	ldd	r24, Y+1	; 0x01
}
 36c:	26 96       	adiw	r28, 0x06	; 6
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <DIO_u8SetPortValue>:

DIO_ERROR_STATUS DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8PortValue)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	00 d0       	rcall	.+0      	; 0x384 <DIO_u8SetPortValue+0x6>
 384:	00 d0       	rcall	.+0      	; 0x386 <DIO_u8SetPortValue+0x8>
 386:	0f 92       	push	r0
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	8a 83       	std	Y+2, r24	; 0x02
 38e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_Status = DIO_NO_ERROR;
 390:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8PortValue == DIO_PORT_HIGH) || (Copy_u8PortValue == DIO_PORT_LOW)){
 392:	8b 81       	ldd	r24, Y+3	; 0x03
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	19 f0       	breq	.+6      	; 0x39e <DIO_u8SetPortValue+0x20>
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	88 23       	and	r24, r24
 39c:	b1 f5       	brne	.+108    	; 0x40a <DIO_u8SetPortValue+0x8c>
		switch(Copy_u8Port){
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	3d 83       	std	Y+5, r19	; 0x05
 3a6:	2c 83       	std	Y+4, r18	; 0x04
 3a8:	8c 81       	ldd	r24, Y+4	; 0x04
 3aa:	9d 81       	ldd	r25, Y+5	; 0x05
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 05       	cpc	r25, r1
 3b0:	d1 f0       	breq	.+52     	; 0x3e6 <DIO_u8SetPortValue+0x68>
 3b2:	2c 81       	ldd	r18, Y+4	; 0x04
 3b4:	3d 81       	ldd	r19, Y+5	; 0x05
 3b6:	22 30       	cpi	r18, 0x02	; 2
 3b8:	31 05       	cpc	r19, r1
 3ba:	2c f4       	brge	.+10     	; 0x3c6 <DIO_u8SetPortValue+0x48>
 3bc:	8c 81       	ldd	r24, Y+4	; 0x04
 3be:	9d 81       	ldd	r25, Y+5	; 0x05
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	61 f0       	breq	.+24     	; 0x3dc <DIO_u8SetPortValue+0x5e>
 3c4:	1f c0       	rjmp	.+62     	; 0x404 <DIO_u8SetPortValue+0x86>
 3c6:	2c 81       	ldd	r18, Y+4	; 0x04
 3c8:	3d 81       	ldd	r19, Y+5	; 0x05
 3ca:	22 30       	cpi	r18, 0x02	; 2
 3cc:	31 05       	cpc	r19, r1
 3ce:	81 f0       	breq	.+32     	; 0x3f0 <DIO_u8SetPortValue+0x72>
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	9d 81       	ldd	r25, Y+5	; 0x05
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	91 05       	cpc	r25, r1
 3d8:	81 f0       	breq	.+32     	; 0x3fa <DIO_u8SetPortValue+0x7c>
 3da:	14 c0       	rjmp	.+40     	; 0x404 <DIO_u8SetPortValue+0x86>

		case DIO_PORTA:
			PORTA = Copy_u8PortValue;
 3dc:	eb e3       	ldi	r30, 0x3B	; 59
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	80 83       	st	Z, r24
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <DIO_u8SetPortValue+0x90>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8PortValue;
 3e6:	e8 e3       	ldi	r30, 0x38	; 56
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	80 83       	st	Z, r24
 3ee:	0f c0       	rjmp	.+30     	; 0x40e <DIO_u8SetPortValue+0x90>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8PortValue;
 3f0:	e5 e3       	ldi	r30, 0x35	; 53
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	80 83       	st	Z, r24
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <DIO_u8SetPortValue+0x90>
			break;
		case DIO_PORTD:
			PORTB = Copy_u8PortValue;
 3fa:	e8 e3       	ldi	r30, 0x38	; 56
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	80 83       	st	Z, r24
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_u8SetPortValue+0x90>
			break;
		default: Error_Status = DIO_PORT_ERROR;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_u8SetPortValue+0x90>

		}
	}
	else{
		Error_Status = DIO_VALUE_ERROR;
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
 40e:	89 81       	ldd	r24, Y+1	; 0x01
}
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	cf 91       	pop	r28
 41c:	df 91       	pop	r29
 41e:	08 95       	ret

00000420 <DIO_u8SetPINValue>:

DIO_ERROR_STATUS DIO_u8SetPINValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8PinValue)
{
 420:	df 93       	push	r29
 422:	cf 93       	push	r28
 424:	00 d0       	rcall	.+0      	; 0x426 <DIO_u8SetPINValue+0x6>
 426:	00 d0       	rcall	.+0      	; 0x428 <DIO_u8SetPINValue+0x8>
 428:	00 d0       	rcall	.+0      	; 0x42a <DIO_u8SetPINValue+0xa>
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	8a 83       	std	Y+2, r24	; 0x02
 430:	6b 83       	std	Y+3, r22	; 0x03
 432:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_Status = DIO_NO_ERROR;
 434:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin <= DIO_PIN7) && (Copy_u8Pin >= DIO_PIN0)){
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	88 30       	cpi	r24, 0x08	; 8
 43a:	08 f0       	brcs	.+2      	; 0x43e <DIO_u8SetPINValue+0x1e>
 43c:	ed c0       	rjmp	.+474    	; 0x618 <DIO_u8SetPINValue+0x1f8>

		switch(Copy_u8Port){
 43e:	8a 81       	ldd	r24, Y+2	; 0x02
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	3e 83       	std	Y+6, r19	; 0x06
 446:	2d 83       	std	Y+5, r18	; 0x05
 448:	8d 81       	ldd	r24, Y+5	; 0x05
 44a:	9e 81       	ldd	r25, Y+6	; 0x06
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	91 05       	cpc	r25, r1
 450:	09 f4       	brne	.+2      	; 0x454 <DIO_u8SetPINValue+0x34>
 452:	49 c0       	rjmp	.+146    	; 0x4e6 <DIO_u8SetPINValue+0xc6>
 454:	2d 81       	ldd	r18, Y+5	; 0x05
 456:	3e 81       	ldd	r19, Y+6	; 0x06
 458:	22 30       	cpi	r18, 0x02	; 2
 45a:	31 05       	cpc	r19, r1
 45c:	2c f4       	brge	.+10     	; 0x468 <DIO_u8SetPINValue+0x48>
 45e:	8d 81       	ldd	r24, Y+5	; 0x05
 460:	9e 81       	ldd	r25, Y+6	; 0x06
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	71 f0       	breq	.+28     	; 0x482 <DIO_u8SetPINValue+0x62>
 466:	d5 c0       	rjmp	.+426    	; 0x612 <DIO_u8SetPINValue+0x1f2>
 468:	2d 81       	ldd	r18, Y+5	; 0x05
 46a:	3e 81       	ldd	r19, Y+6	; 0x06
 46c:	22 30       	cpi	r18, 0x02	; 2
 46e:	31 05       	cpc	r19, r1
 470:	09 f4       	brne	.+2      	; 0x474 <DIO_u8SetPINValue+0x54>
 472:	6b c0       	rjmp	.+214    	; 0x54a <DIO_u8SetPINValue+0x12a>
 474:	8d 81       	ldd	r24, Y+5	; 0x05
 476:	9e 81       	ldd	r25, Y+6	; 0x06
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	91 05       	cpc	r25, r1
 47c:	09 f4       	brne	.+2      	; 0x480 <DIO_u8SetPINValue+0x60>
 47e:	97 c0       	rjmp	.+302    	; 0x5ae <DIO_u8SetPINValue+0x18e>
 480:	c8 c0       	rjmp	.+400    	; 0x612 <DIO_u8SetPINValue+0x1f2>

		case DIO_PORTA:
			if(Copy_u8PinValue == DIO_PIN_HIGH){
 482:	8c 81       	ldd	r24, Y+4	; 0x04
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	a1 f4       	brne	.+40     	; 0x4b0 <DIO_u8SetPINValue+0x90>
				SetBit(PORTA,Copy_u8Pin);
 488:	ab e3       	ldi	r26, 0x3B	; 59
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	eb e3       	ldi	r30, 0x3B	; 59
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	48 2f       	mov	r20, r24
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 2e       	mov	r0, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_u8SetPINValue+0x86>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	0a 94       	dec	r0
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_u8SetPINValue+0x82>
 4aa:	84 2b       	or	r24, r20
 4ac:	8c 93       	st	X, r24
 4ae:	b6 c0       	rjmp	.+364    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else if(Copy_u8PinValue == DIO_PIN_LOW){
 4b0:	8c 81       	ldd	r24, Y+4	; 0x04
 4b2:	88 23       	and	r24, r24
 4b4:	a9 f4       	brne	.+42     	; 0x4e0 <DIO_u8SetPINValue+0xc0>
				ClrBit(PORTA,Copy_u8Pin);
 4b6:	ab e3       	ldi	r26, 0x3B	; 59
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	eb e3       	ldi	r30, 0x3B	; 59
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	48 2f       	mov	r20, r24
 4c2:	8b 81       	ldd	r24, Y+3	; 0x03
 4c4:	28 2f       	mov	r18, r24
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 2e       	mov	r0, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_u8SetPINValue+0xb4>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	0a 94       	dec	r0
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_u8SetPINValue+0xb0>
 4d8:	80 95       	com	r24
 4da:	84 23       	and	r24, r20
 4dc:	8c 93       	st	X, r24
 4de:	9e c0       	rjmp	.+316    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_VALUE_ERROR;
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	9b c0       	rjmp	.+310    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
		case DIO_PORTB:
			if(Copy_u8PinValue == DIO_PIN_HIGH){
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	a1 f4       	brne	.+40     	; 0x514 <DIO_u8SetPINValue+0xf4>
				SetBit(PORTB,Copy_u8Pin);
 4ec:	a8 e3       	ldi	r26, 0x38	; 56
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	e8 e3       	ldi	r30, 0x38	; 56
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	48 2f       	mov	r20, r24
 4f8:	8b 81       	ldd	r24, Y+3	; 0x03
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 2e       	mov	r0, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_u8SetPINValue+0xea>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	0a 94       	dec	r0
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_u8SetPINValue+0xe6>
 50e:	84 2b       	or	r24, r20
 510:	8c 93       	st	X, r24
 512:	84 c0       	rjmp	.+264    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else if(Copy_u8PinValue == DIO_PIN_LOW){
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	88 23       	and	r24, r24
 518:	a9 f4       	brne	.+42     	; 0x544 <DIO_u8SetPINValue+0x124>
				ClrBit(PORTB,Copy_u8Pin);
 51a:	a8 e3       	ldi	r26, 0x38	; 56
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e8 e3       	ldi	r30, 0x38	; 56
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8b 81       	ldd	r24, Y+3	; 0x03
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_u8SetPINValue+0x118>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_u8SetPINValue+0x114>
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	8c 93       	st	X, r24
 542:	6c c0       	rjmp	.+216    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_VALUE_ERROR;
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	69 c0       	rjmp	.+210    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
		case DIO_PORTC:
			if(Copy_u8PinValue == DIO_PIN_HIGH){
 54a:	8c 81       	ldd	r24, Y+4	; 0x04
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	a1 f4       	brne	.+40     	; 0x578 <DIO_u8SetPINValue+0x158>
				SetBit(PORTC,Copy_u8Pin);
 550:	a5 e3       	ldi	r26, 0x35	; 53
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	e5 e3       	ldi	r30, 0x35	; 53
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	48 2f       	mov	r20, r24
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 2e       	mov	r0, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_u8SetPINValue+0x14e>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_u8SetPINValue+0x14a>
 572:	84 2b       	or	r24, r20
 574:	8c 93       	st	X, r24
 576:	52 c0       	rjmp	.+164    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else if(Copy_u8PinValue == DIO_PIN_LOW){
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	88 23       	and	r24, r24
 57c:	a9 f4       	brne	.+42     	; 0x5a8 <DIO_u8SetPINValue+0x188>
				ClrBit(PORTC,Copy_u8Pin);
 57e:	a5 e3       	ldi	r26, 0x35	; 53
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e5 e3       	ldi	r30, 0x35	; 53
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 2e       	mov	r0, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_u8SetPINValue+0x17c>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_u8SetPINValue+0x178>
 5a0:	80 95       	com	r24
 5a2:	84 23       	and	r24, r20
 5a4:	8c 93       	st	X, r24
 5a6:	3a c0       	rjmp	.+116    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_VALUE_ERROR;
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	37 c0       	rjmp	.+110    	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
		case DIO_PORTD:
			if(Copy_u8PinValue == DIO_PIN_HIGH){
 5ae:	8c 81       	ldd	r24, Y+4	; 0x04
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	a1 f4       	brne	.+40     	; 0x5dc <DIO_u8SetPINValue+0x1bc>
				SetBit(PORTD,Copy_u8Pin);
 5b4:	a2 e3       	ldi	r26, 0x32	; 50
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	e2 e3       	ldi	r30, 0x32	; 50
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	48 2f       	mov	r20, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 2e       	mov	r0, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_u8SetPINValue+0x1b2>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	0a 94       	dec	r0
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_u8SetPINValue+0x1ae>
 5d6:	84 2b       	or	r24, r20
 5d8:	8c 93       	st	X, r24
 5da:	20 c0       	rjmp	.+64     	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else if(Copy_u8PinValue == DIO_PIN_LOW){
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	88 23       	and	r24, r24
 5e0:	a9 f4       	brne	.+42     	; 0x60c <DIO_u8SetPINValue+0x1ec>
				ClrBit(PORTD,Copy_u8Pin);
 5e2:	a2 e3       	ldi	r26, 0x32	; 50
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	e2 e3       	ldi	r30, 0x32	; 50
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	8b 81       	ldd	r24, Y+3	; 0x03
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 2e       	mov	r0, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8SetPINValue+0x1e0>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	0a 94       	dec	r0
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8SetPINValue+0x1dc>
 604:	80 95       	com	r24
 606:	84 23       	and	r24, r20
 608:	8c 93       	st	X, r24
 60a:	08 c0       	rjmp	.+16     	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
			else{
				Error_Status = DIO_VALUE_ERROR;
 60c:	83 e0       	ldi	r24, 0x03	; 3
 60e:	89 83       	std	Y+1, r24	; 0x01
 610:	05 c0       	rjmp	.+10     	; 0x61c <DIO_u8SetPINValue+0x1fc>
				break;
			}
		default: Error_Status = DIO_PORT_ERROR;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	89 83       	std	Y+1, r24	; 0x01
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_u8SetPINValue+0x1fc>

		}
	}
	else{

		Error_Status = DIO_PIN_ERROR;
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
 61c:	89 81       	ldd	r24, Y+1	; 0x01

}
 61e:	26 96       	adiw	r28, 0x06	; 6
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	cf 91       	pop	r28
 62c:	df 91       	pop	r29
 62e:	08 95       	ret

00000630 <DIO_u8GetPortValue>:

DIO_ERROR_STATUS DIO_u8GetPortValue(u8 Copy_u8Port, u8 *Copy_u8PortValue)
{
 630:	df 93       	push	r29
 632:	cf 93       	push	r28
 634:	00 d0       	rcall	.+0      	; 0x636 <DIO_u8GetPortValue+0x6>
 636:	00 d0       	rcall	.+0      	; 0x638 <DIO_u8GetPortValue+0x8>
 638:	00 d0       	rcall	.+0      	; 0x63a <DIO_u8GetPortValue+0xa>
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	8a 83       	std	Y+2, r24	; 0x02
 640:	7c 83       	std	Y+4, r23	; 0x04
 642:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_Status = DIO_NO_ERROR;
 644:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port){
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	28 2f       	mov	r18, r24
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	3e 83       	std	Y+6, r19	; 0x06
 64e:	2d 83       	std	Y+5, r18	; 0x05
 650:	8d 81       	ldd	r24, Y+5	; 0x05
 652:	9e 81       	ldd	r25, Y+6	; 0x06
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	91 05       	cpc	r25, r1
 658:	e1 f0       	breq	.+56     	; 0x692 <DIO_u8GetPortValue+0x62>
 65a:	2d 81       	ldd	r18, Y+5	; 0x05
 65c:	3e 81       	ldd	r19, Y+6	; 0x06
 65e:	22 30       	cpi	r18, 0x02	; 2
 660:	31 05       	cpc	r19, r1
 662:	2c f4       	brge	.+10     	; 0x66e <DIO_u8GetPortValue+0x3e>
 664:	8d 81       	ldd	r24, Y+5	; 0x05
 666:	9e 81       	ldd	r25, Y+6	; 0x06
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	61 f0       	breq	.+24     	; 0x684 <DIO_u8GetPortValue+0x54>
 66c:	27 c0       	rjmp	.+78     	; 0x6bc <DIO_u8GetPortValue+0x8c>
 66e:	2d 81       	ldd	r18, Y+5	; 0x05
 670:	3e 81       	ldd	r19, Y+6	; 0x06
 672:	22 30       	cpi	r18, 0x02	; 2
 674:	31 05       	cpc	r19, r1
 676:	a1 f0       	breq	.+40     	; 0x6a0 <DIO_u8GetPortValue+0x70>
 678:	8d 81       	ldd	r24, Y+5	; 0x05
 67a:	9e 81       	ldd	r25, Y+6	; 0x06
 67c:	83 30       	cpi	r24, 0x03	; 3
 67e:	91 05       	cpc	r25, r1
 680:	b1 f0       	breq	.+44     	; 0x6ae <DIO_u8GetPortValue+0x7e>
 682:	1c c0       	rjmp	.+56     	; 0x6bc <DIO_u8GetPortValue+0x8c>

	case DIO_PORTA:
		*Copy_u8PortValue = DDRA;
 684:	ea e3       	ldi	r30, 0x3A	; 58
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	eb 81       	ldd	r30, Y+3	; 0x03
 68c:	fc 81       	ldd	r31, Y+4	; 0x04
 68e:	80 83       	st	Z, r24
 690:	17 c0       	rjmp	.+46     	; 0x6c0 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_PORTB:
		*Copy_u8PortValue = DDRB;
 692:	e7 e3       	ldi	r30, 0x37	; 55
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	eb 81       	ldd	r30, Y+3	; 0x03
 69a:	fc 81       	ldd	r31, Y+4	; 0x04
 69c:	80 83       	st	Z, r24
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_PORTC:
		*Copy_u8PortValue = DDRC;
 6a0:	e4 e3       	ldi	r30, 0x34	; 52
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	eb 81       	ldd	r30, Y+3	; 0x03
 6a8:	fc 81       	ldd	r31, Y+4	; 0x04
 6aa:	80 83       	st	Z, r24
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <DIO_u8GetPortValue+0x90>
		break;
	case DIO_PORTD:
		*Copy_u8PortValue = DDRD;
 6ae:	e1 e3       	ldi	r30, 0x31	; 49
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	eb 81       	ldd	r30, Y+3	; 0x03
 6b6:	fc 81       	ldd	r31, Y+4	; 0x04
 6b8:	80 83       	st	Z, r24
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_u8GetPortValue+0x90>
		break;
	default: Error_Status = DIO_PORT_ERROR;
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	89 83       	std	Y+1, r24	; 0x01


	}
	return Error_Status;
 6c0:	89 81       	ldd	r24, Y+1	; 0x01


}
 6c2:	26 96       	adiw	r28, 0x06	; 6
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	de bf       	out	0x3e, r29	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	cd bf       	out	0x3d, r28	; 61
 6ce:	cf 91       	pop	r28
 6d0:	df 91       	pop	r29
 6d2:	08 95       	ret

000006d4 <DIO_u8GetPINValue>:

DIO_ERROR_STATUS DIO_u8GetPINValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8PinValue)
{
 6d4:	df 93       	push	r29
 6d6:	cf 93       	push	r28
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	27 97       	sbiw	r28, 0x07	; 7
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	8a 83       	std	Y+2, r24	; 0x02
 6ea:	6b 83       	std	Y+3, r22	; 0x03
 6ec:	5d 83       	std	Y+5, r21	; 0x05
 6ee:	4c 83       	std	Y+4, r20	; 0x04

	u8 Error_Status = DIO_NO_ERROR;
 6f0:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin <= DIO_PIN7) && (Copy_u8Pin >= DIO_PIN0)){
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	88 30       	cpi	r24, 0x08	; 8
 6f6:	08 f0       	brcs	.+2      	; 0x6fa <DIO_u8GetPINValue+0x26>
 6f8:	84 c0       	rjmp	.+264    	; 0x802 <DIO_u8GetPINValue+0x12e>

		switch(Copy_u8Port){
 6fa:	8a 81       	ldd	r24, Y+2	; 0x02
 6fc:	28 2f       	mov	r18, r24
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	3f 83       	std	Y+7, r19	; 0x07
 702:	2e 83       	std	Y+6, r18	; 0x06
 704:	4e 81       	ldd	r20, Y+6	; 0x06
 706:	5f 81       	ldd	r21, Y+7	; 0x07
 708:	41 30       	cpi	r20, 0x01	; 1
 70a:	51 05       	cpc	r21, r1
 70c:	79 f1       	breq	.+94     	; 0x76c <DIO_u8GetPINValue+0x98>
 70e:	8e 81       	ldd	r24, Y+6	; 0x06
 710:	9f 81       	ldd	r25, Y+7	; 0x07
 712:	82 30       	cpi	r24, 0x02	; 2
 714:	91 05       	cpc	r25, r1
 716:	34 f4       	brge	.+12     	; 0x724 <DIO_u8GetPINValue+0x50>
 718:	2e 81       	ldd	r18, Y+6	; 0x06
 71a:	3f 81       	ldd	r19, Y+7	; 0x07
 71c:	21 15       	cp	r18, r1
 71e:	31 05       	cpc	r19, r1
 720:	69 f0       	breq	.+26     	; 0x73c <DIO_u8GetPINValue+0x68>
 722:	6c c0       	rjmp	.+216    	; 0x7fc <DIO_u8GetPINValue+0x128>
 724:	4e 81       	ldd	r20, Y+6	; 0x06
 726:	5f 81       	ldd	r21, Y+7	; 0x07
 728:	42 30       	cpi	r20, 0x02	; 2
 72a:	51 05       	cpc	r21, r1
 72c:	b9 f1       	breq	.+110    	; 0x79c <DIO_u8GetPINValue+0xc8>
 72e:	8e 81       	ldd	r24, Y+6	; 0x06
 730:	9f 81       	ldd	r25, Y+7	; 0x07
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	91 05       	cpc	r25, r1
 736:	09 f4       	brne	.+2      	; 0x73a <DIO_u8GetPINValue+0x66>
 738:	49 c0       	rjmp	.+146    	; 0x7cc <DIO_u8GetPINValue+0xf8>
 73a:	60 c0       	rjmp	.+192    	; 0x7fc <DIO_u8GetPINValue+0x128>

		case DIO_PORTA:
			*Copy_u8PinValue = GetBit(PORTA,Copy_u8Pin);
 73c:	ab e3       	ldi	r26, 0x3B	; 59
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	eb e3       	ldi	r30, 0x3B	; 59
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	28 2f       	mov	r18, r24
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	8b 81       	ldd	r24, Y+3	; 0x03
 74c:	88 2f       	mov	r24, r24
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	a9 01       	movw	r20, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_u8GetPINValue+0x84>
 754:	55 95       	asr	r21
 756:	47 95       	ror	r20
 758:	8a 95       	dec	r24
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_u8GetPINValue+0x80>
 75c:	ca 01       	movw	r24, r20
 75e:	81 70       	andi	r24, 0x01	; 1
 760:	8c 93       	st	X, r24
 762:	8c 91       	ld	r24, X
 764:	ec 81       	ldd	r30, Y+4	; 0x04
 766:	fd 81       	ldd	r31, Y+5	; 0x05
 768:	80 83       	st	Z, r24
 76a:	4d c0       	rjmp	.+154    	; 0x806 <DIO_u8GetPINValue+0x132>
			break;
		case DIO_PORTB:
			*Copy_u8PinValue = GetBit(PORTB,Copy_u8Pin);
 76c:	a8 e3       	ldi	r26, 0x38	; 56
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	e8 e3       	ldi	r30, 0x38	; 56
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	28 2f       	mov	r18, r24
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	8b 81       	ldd	r24, Y+3	; 0x03
 77c:	88 2f       	mov	r24, r24
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	a9 01       	movw	r20, r18
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_u8GetPINValue+0xb4>
 784:	55 95       	asr	r21
 786:	47 95       	ror	r20
 788:	8a 95       	dec	r24
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_u8GetPINValue+0xb0>
 78c:	ca 01       	movw	r24, r20
 78e:	81 70       	andi	r24, 0x01	; 1
 790:	8c 93       	st	X, r24
 792:	8c 91       	ld	r24, X
 794:	ec 81       	ldd	r30, Y+4	; 0x04
 796:	fd 81       	ldd	r31, Y+5	; 0x05
 798:	80 83       	st	Z, r24
 79a:	35 c0       	rjmp	.+106    	; 0x806 <DIO_u8GetPINValue+0x132>
			break;
		case DIO_PORTC:
			*Copy_u8PinValue = GetBit(PORTC,Copy_u8Pin);
 79c:	a5 e3       	ldi	r26, 0x35	; 53
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e5 e3       	ldi	r30, 0x35	; 53
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	88 2f       	mov	r24, r24
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	a9 01       	movw	r20, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_u8GetPINValue+0xe4>
 7b4:	55 95       	asr	r21
 7b6:	47 95       	ror	r20
 7b8:	8a 95       	dec	r24
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_u8GetPINValue+0xe0>
 7bc:	ca 01       	movw	r24, r20
 7be:	81 70       	andi	r24, 0x01	; 1
 7c0:	8c 93       	st	X, r24
 7c2:	8c 91       	ld	r24, X
 7c4:	ec 81       	ldd	r30, Y+4	; 0x04
 7c6:	fd 81       	ldd	r31, Y+5	; 0x05
 7c8:	80 83       	st	Z, r24
 7ca:	1d c0       	rjmp	.+58     	; 0x806 <DIO_u8GetPINValue+0x132>
			break;
		case DIO_PORTD:
			*Copy_u8PinValue = GetBit(PORTD,Copy_u8Pin);
 7cc:	a2 e3       	ldi	r26, 0x32	; 50
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	e2 e3       	ldi	r30, 0x32	; 50
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	28 2f       	mov	r18, r24
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	8b 81       	ldd	r24, Y+3	; 0x03
 7dc:	88 2f       	mov	r24, r24
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	a9 01       	movw	r20, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_u8GetPINValue+0x114>
 7e4:	55 95       	asr	r21
 7e6:	47 95       	ror	r20
 7e8:	8a 95       	dec	r24
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_u8GetPINValue+0x110>
 7ec:	ca 01       	movw	r24, r20
 7ee:	81 70       	andi	r24, 0x01	; 1
 7f0:	8c 93       	st	X, r24
 7f2:	8c 91       	ld	r24, X
 7f4:	ec 81       	ldd	r30, Y+4	; 0x04
 7f6:	fd 81       	ldd	r31, Y+5	; 0x05
 7f8:	80 83       	st	Z, r24
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <DIO_u8GetPINValue+0x132>
			break;
		default: Error_Status = DIO_PORT_ERROR;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_u8GetPINValue+0x132>

		}
	}
	else{
		Error_Status = DIO_PIN_ERROR;
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_Status;
 806:	89 81       	ldd	r24, Y+1	; 0x01
}
 808:	27 96       	adiw	r28, 0x07	; 7
 80a:	0f b6       	in	r0, 0x3f	; 63
 80c:	f8 94       	cli
 80e:	de bf       	out	0x3e, r29	; 62
 810:	0f be       	out	0x3f, r0	; 63
 812:	cd bf       	out	0x3d, r28	; 61
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	08 95       	ret

0000081a <EXTI_SensingStateINT0>:
static void (*EXTI_Ptr_CallBack_INT0)(void) = NULL;
static void (*EXTI_Ptr_CallBack_INT1)(void) = NULL;
static void (*EXTI_Ptr_CallBack_INT2)(void) = NULL;


EXTI_Error_Status EXTI_SensingStateINT0(u8 Copy_u8SenseState){
 81a:	df 93       	push	r29
 81c:	cf 93       	push	r28
 81e:	00 d0       	rcall	.+0      	; 0x820 <EXTI_SensingStateINT0+0x6>
 820:	00 d0       	rcall	.+0      	; 0x822 <EXTI_SensingStateINT0+0x8>
 822:	cd b7       	in	r28, 0x3d	; 61
 824:	de b7       	in	r29, 0x3e	; 62
 826:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_Error_Status = EXTI_No_Error;
 828:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8SenseState){
 82a:	8a 81       	ldd	r24, Y+2	; 0x02
 82c:	28 2f       	mov	r18, r24
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	3c 83       	std	Y+4, r19	; 0x04
 832:	2b 83       	std	Y+3, r18	; 0x03
 834:	8b 81       	ldd	r24, Y+3	; 0x03
 836:	9c 81       	ldd	r25, Y+4	; 0x04
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	91 05       	cpc	r25, r1
 83c:	99 f1       	breq	.+102    	; 0x8a4 <__stack+0x45>
 83e:	2b 81       	ldd	r18, Y+3	; 0x03
 840:	3c 81       	ldd	r19, Y+4	; 0x04
 842:	22 30       	cpi	r18, 0x02	; 2
 844:	31 05       	cpc	r19, r1
 846:	2c f4       	brge	.+10     	; 0x852 <EXTI_SensingStateINT0+0x38>
 848:	8b 81       	ldd	r24, Y+3	; 0x03
 84a:	9c 81       	ldd	r25, Y+4	; 0x04
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	d9 f0       	breq	.+54     	; 0x886 <__stack+0x27>
 850:	47 c0       	rjmp	.+142    	; 0x8e0 <__stack+0x81>
 852:	2b 81       	ldd	r18, Y+3	; 0x03
 854:	3c 81       	ldd	r19, Y+4	; 0x04
 856:	22 30       	cpi	r18, 0x02	; 2
 858:	31 05       	cpc	r19, r1
 85a:	31 f0       	breq	.+12     	; 0x868 <__stack+0x9>
 85c:	8b 81       	ldd	r24, Y+3	; 0x03
 85e:	9c 81       	ldd	r25, Y+4	; 0x04
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	91 05       	cpc	r25, r1
 864:	71 f1       	breq	.+92     	; 0x8c2 <__stack+0x63>
 866:	3c c0       	rjmp	.+120    	; 0x8e0 <__stack+0x81>

	case EXTI_FallingEdge:

		SetBit(MCUCR,MCUCR_ISC01);
 868:	a5 e5       	ldi	r26, 0x55	; 85
 86a:	b0 e0       	ldi	r27, 0x00	; 0
 86c:	e5 e5       	ldi	r30, 0x55	; 85
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	82 60       	ori	r24, 0x02	; 2
 874:	8c 93       	st	X, r24
		ClrBit(MCUCR,MCUCR_ISC00);
 876:	a5 e5       	ldi	r26, 0x55	; 85
 878:	b0 e0       	ldi	r27, 0x00	; 0
 87a:	e5 e5       	ldi	r30, 0x55	; 85
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	80 81       	ld	r24, Z
 880:	8e 7f       	andi	r24, 0xFE	; 254
 882:	8c 93       	st	X, r24
 884:	2f c0       	rjmp	.+94     	; 0x8e4 <__stack+0x85>

		break;

	case EXTI_LowLevel:

		ClrBit(MCUCR,MCUCR_ISC01);
 886:	a5 e5       	ldi	r26, 0x55	; 85
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	e5 e5       	ldi	r30, 0x55	; 85
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	8d 7f       	andi	r24, 0xFD	; 253
 892:	8c 93       	st	X, r24
		ClrBit(MCUCR,MCUCR_ISC00);
 894:	a5 e5       	ldi	r26, 0x55	; 85
 896:	b0 e0       	ldi	r27, 0x00	; 0
 898:	e5 e5       	ldi	r30, 0x55	; 85
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	8e 7f       	andi	r24, 0xFE	; 254
 8a0:	8c 93       	st	X, r24
 8a2:	20 c0       	rjmp	.+64     	; 0x8e4 <__stack+0x85>

		break;

	case EXTI_OnChange:

		SetBit(MCUCR,MCUCR_ISC00);
 8a4:	a5 e5       	ldi	r26, 0x55	; 85
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	e5 e5       	ldi	r30, 0x55	; 85
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	8c 93       	st	X, r24
		ClrBit(MCUCR,MCUCR_ISC01);
 8b2:	a5 e5       	ldi	r26, 0x55	; 85
 8b4:	b0 e0       	ldi	r27, 0x00	; 0
 8b6:	e5 e5       	ldi	r30, 0x55	; 85
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	8d 7f       	andi	r24, 0xFD	; 253
 8be:	8c 93       	st	X, r24
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__stack+0x85>

		break;

	case EXTI_RisingEdge:

		SetBit(MCUCR,MCUCR_ISC01);
 8c2:	a5 e5       	ldi	r26, 0x55	; 85
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e5 e5       	ldi	r30, 0x55	; 85
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	8c 93       	st	X, r24
		SetBit(MCUCR,MCUCR_ISC00);
 8d0:	a5 e5       	ldi	r26, 0x55	; 85
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	e5 e5       	ldi	r30, 0x55	; 85
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	8c 93       	st	X, r24
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>

		break;

	default:
		Loc_Error_Status = EXTI_SenseState_Error;
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_Error_Status;
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	cf 91       	pop	r28
 8f0:	df 91       	pop	r29
 8f2:	08 95       	ret

000008f4 <EXTI_SensingStateINT1>:

EXTI_Error_Status EXTI_SensingStateINT1(u8 Copy_u8SenseState){
 8f4:	df 93       	push	r29
 8f6:	cf 93       	push	r28
 8f8:	00 d0       	rcall	.+0      	; 0x8fa <EXTI_SensingStateINT1+0x6>
 8fa:	00 d0       	rcall	.+0      	; 0x8fc <EXTI_SensingStateINT1+0x8>
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_Error_Status = EXTI_No_Error;
 902:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8SenseState){
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	28 2f       	mov	r18, r24
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	3c 83       	std	Y+4, r19	; 0x04
 90c:	2b 83       	std	Y+3, r18	; 0x03
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	9c 81       	ldd	r25, Y+4	; 0x04
 912:	81 30       	cpi	r24, 0x01	; 1
 914:	91 05       	cpc	r25, r1
 916:	99 f1       	breq	.+102    	; 0x97e <EXTI_SensingStateINT1+0x8a>
 918:	2b 81       	ldd	r18, Y+3	; 0x03
 91a:	3c 81       	ldd	r19, Y+4	; 0x04
 91c:	22 30       	cpi	r18, 0x02	; 2
 91e:	31 05       	cpc	r19, r1
 920:	2c f4       	brge	.+10     	; 0x92c <EXTI_SensingStateINT1+0x38>
 922:	8b 81       	ldd	r24, Y+3	; 0x03
 924:	9c 81       	ldd	r25, Y+4	; 0x04
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	d9 f0       	breq	.+54     	; 0x960 <EXTI_SensingStateINT1+0x6c>
 92a:	47 c0       	rjmp	.+142    	; 0x9ba <EXTI_SensingStateINT1+0xc6>
 92c:	2b 81       	ldd	r18, Y+3	; 0x03
 92e:	3c 81       	ldd	r19, Y+4	; 0x04
 930:	22 30       	cpi	r18, 0x02	; 2
 932:	31 05       	cpc	r19, r1
 934:	31 f0       	breq	.+12     	; 0x942 <EXTI_SensingStateINT1+0x4e>
 936:	8b 81       	ldd	r24, Y+3	; 0x03
 938:	9c 81       	ldd	r25, Y+4	; 0x04
 93a:	83 30       	cpi	r24, 0x03	; 3
 93c:	91 05       	cpc	r25, r1
 93e:	71 f1       	breq	.+92     	; 0x99c <EXTI_SensingStateINT1+0xa8>
 940:	3c c0       	rjmp	.+120    	; 0x9ba <EXTI_SensingStateINT1+0xc6>

	case EXTI_FallingEdge:

		SetBit(MCUCR,MCUCR_ISC11);
 942:	a5 e5       	ldi	r26, 0x55	; 85
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e5 e5       	ldi	r30, 0x55	; 85
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	88 60       	ori	r24, 0x08	; 8
 94e:	8c 93       	st	X, r24
		ClrBit(MCUCR,MCUCR_ISC10);
 950:	a5 e5       	ldi	r26, 0x55	; 85
 952:	b0 e0       	ldi	r27, 0x00	; 0
 954:	e5 e5       	ldi	r30, 0x55	; 85
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	80 81       	ld	r24, Z
 95a:	8b 7f       	andi	r24, 0xFB	; 251
 95c:	8c 93       	st	X, r24
 95e:	2f c0       	rjmp	.+94     	; 0x9be <EXTI_SensingStateINT1+0xca>

		break;

	case EXTI_LowLevel:

		ClrBit(MCUCR,MCUCR_ISC11);
 960:	a5 e5       	ldi	r26, 0x55	; 85
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	e5 e5       	ldi	r30, 0x55	; 85
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	87 7f       	andi	r24, 0xF7	; 247
 96c:	8c 93       	st	X, r24
		ClrBit(MCUCR,MCUCR_ISC10);
 96e:	a5 e5       	ldi	r26, 0x55	; 85
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	e5 e5       	ldi	r30, 0x55	; 85
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	8b 7f       	andi	r24, 0xFB	; 251
 97a:	8c 93       	st	X, r24
 97c:	20 c0       	rjmp	.+64     	; 0x9be <EXTI_SensingStateINT1+0xca>

		break;

	case EXTI_OnChange:

		SetBit(MCUCR,MCUCR_ISC10);
 97e:	a5 e5       	ldi	r26, 0x55	; 85
 980:	b0 e0       	ldi	r27, 0x00	; 0
 982:	e5 e5       	ldi	r30, 0x55	; 85
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	84 60       	ori	r24, 0x04	; 4
 98a:	8c 93       	st	X, r24
		ClrBit(MCUCR,MCUCR_ISC11);
 98c:	a5 e5       	ldi	r26, 0x55	; 85
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	e5 e5       	ldi	r30, 0x55	; 85
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	87 7f       	andi	r24, 0xF7	; 247
 998:	8c 93       	st	X, r24
 99a:	11 c0       	rjmp	.+34     	; 0x9be <EXTI_SensingStateINT1+0xca>

		break;

	case EXTI_RisingEdge:

		SetBit(MCUCR,MCUCR_ISC11);
 99c:	a5 e5       	ldi	r26, 0x55	; 85
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e5 e5       	ldi	r30, 0x55	; 85
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	88 60       	ori	r24, 0x08	; 8
 9a8:	8c 93       	st	X, r24
		SetBit(MCUCR,MCUCR_ISC10);
 9aa:	a5 e5       	ldi	r26, 0x55	; 85
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	e5 e5       	ldi	r30, 0x55	; 85
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	84 60       	ori	r24, 0x04	; 4
 9b6:	8c 93       	st	X, r24
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <EXTI_SensingStateINT1+0xca>

		break;

	default:
		Loc_Error_Status = EXTI_SenseState_Error;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_Error_Status;
 9be:	89 81       	ldd	r24, Y+1	; 0x01
}
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	0f 90       	pop	r0
 9c6:	0f 90       	pop	r0
 9c8:	cf 91       	pop	r28
 9ca:	df 91       	pop	r29
 9cc:	08 95       	ret

000009ce <EXTI_SensingStateINT2>:

EXTI_Error_Status EXTI_SensingStateINT2(u8 Copy_u8SenseState){
 9ce:	df 93       	push	r29
 9d0:	cf 93       	push	r28
 9d2:	00 d0       	rcall	.+0      	; 0x9d4 <EXTI_SensingStateINT2+0x6>
 9d4:	00 d0       	rcall	.+0      	; 0x9d6 <EXTI_SensingStateINT2+0x8>
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
 9da:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_Error_Status = EXTI_No_Error;
 9dc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8SenseState){
 9de:	8a 81       	ldd	r24, Y+2	; 0x02
 9e0:	28 2f       	mov	r18, r24
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	3c 83       	std	Y+4, r19	; 0x04
 9e6:	2b 83       	std	Y+3, r18	; 0x03
 9e8:	8b 81       	ldd	r24, Y+3	; 0x03
 9ea:	9c 81       	ldd	r25, Y+4	; 0x04
 9ec:	82 30       	cpi	r24, 0x02	; 2
 9ee:	91 05       	cpc	r25, r1
 9f0:	31 f0       	breq	.+12     	; 0x9fe <EXTI_SensingStateINT2+0x30>
 9f2:	2b 81       	ldd	r18, Y+3	; 0x03
 9f4:	3c 81       	ldd	r19, Y+4	; 0x04
 9f6:	23 30       	cpi	r18, 0x03	; 3
 9f8:	31 05       	cpc	r19, r1
 9fa:	49 f0       	breq	.+18     	; 0xa0e <EXTI_SensingStateINT2+0x40>
 9fc:	10 c0       	rjmp	.+32     	; 0xa1e <EXTI_SensingStateINT2+0x50>

	case EXTI_FallingEdge:

		ClrBit(MCUCR,MCUCSR_ISC2);
 9fe:	a5 e5       	ldi	r26, 0x55	; 85
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e5 e5       	ldi	r30, 0x55	; 85
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	8f 7b       	andi	r24, 0xBF	; 191
 a0a:	8c 93       	st	X, r24
 a0c:	0a c0       	rjmp	.+20     	; 0xa22 <EXTI_SensingStateINT2+0x54>

		break;

	case EXTI_RisingEdge:

		SetBit(MCUCR,MCUCSR_ISC2);
 a0e:	a5 e5       	ldi	r26, 0x55	; 85
 a10:	b0 e0       	ldi	r27, 0x00	; 0
 a12:	e5 e5       	ldi	r30, 0x55	; 85
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	80 64       	ori	r24, 0x40	; 64
 a1a:	8c 93       	st	X, r24
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <EXTI_SensingStateINT2+0x54>

		break;

	default:
		Loc_Error_Status = EXTI_SenseState_Error;
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_Error_Status;
 a22:	89 81       	ldd	r24, Y+1	; 0x01
}
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	0f 90       	pop	r0
 a2a:	0f 90       	pop	r0
 a2c:	cf 91       	pop	r28
 a2e:	df 91       	pop	r29
 a30:	08 95       	ret

00000a32 <EXTI_VoidEnableINT0>:

void EXTI_VoidEnableINT0(void){
 a32:	df 93       	push	r29
 a34:	cf 93       	push	r28
 a36:	cd b7       	in	r28, 0x3d	; 61
 a38:	de b7       	in	r29, 0x3e	; 62

	SetBit(GICR,GICR_INT0);
 a3a:	ab e5       	ldi	r26, 0x5B	; 91
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	eb e5       	ldi	r30, 0x5B	; 91
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	80 64       	ori	r24, 0x40	; 64
 a46:	8c 93       	st	X, r24
}
 a48:	cf 91       	pop	r28
 a4a:	df 91       	pop	r29
 a4c:	08 95       	ret

00000a4e <EXTI_VoidEnableINT1>:

void EXTI_VoidEnableINT1(void){
 a4e:	df 93       	push	r29
 a50:	cf 93       	push	r28
 a52:	cd b7       	in	r28, 0x3d	; 61
 a54:	de b7       	in	r29, 0x3e	; 62

	SetBit(GICR,GICR_INT1);
 a56:	ab e5       	ldi	r26, 0x5B	; 91
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	eb e5       	ldi	r30, 0x5B	; 91
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	80 68       	ori	r24, 0x80	; 128
 a62:	8c 93       	st	X, r24
}
 a64:	cf 91       	pop	r28
 a66:	df 91       	pop	r29
 a68:	08 95       	ret

00000a6a <EXTI_VoidEnableINT2>:

void EXTI_VoidEnableINT2(void){
 a6a:	df 93       	push	r29
 a6c:	cf 93       	push	r28
 a6e:	cd b7       	in	r28, 0x3d	; 61
 a70:	de b7       	in	r29, 0x3e	; 62

	SetBit(GICR,GICR_INT2);
 a72:	ab e5       	ldi	r26, 0x5B	; 91
 a74:	b0 e0       	ldi	r27, 0x00	; 0
 a76:	eb e5       	ldi	r30, 0x5B	; 91
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	80 81       	ld	r24, Z
 a7c:	80 62       	ori	r24, 0x20	; 32
 a7e:	8c 93       	st	X, r24
}
 a80:	cf 91       	pop	r28
 a82:	df 91       	pop	r29
 a84:	08 95       	ret

00000a86 <EXTI_VoidDisableINT0>:

void EXTI_VoidDisableINT0(void){
 a86:	df 93       	push	r29
 a88:	cf 93       	push	r28
 a8a:	cd b7       	in	r28, 0x3d	; 61
 a8c:	de b7       	in	r29, 0x3e	; 62

	ClrBit(GICR,GICR_INT0);
 a8e:	ab e5       	ldi	r26, 0x5B	; 91
 a90:	b0 e0       	ldi	r27, 0x00	; 0
 a92:	eb e5       	ldi	r30, 0x5B	; 91
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	8f 7b       	andi	r24, 0xBF	; 191
 a9a:	8c 93       	st	X, r24

}
 a9c:	cf 91       	pop	r28
 a9e:	df 91       	pop	r29
 aa0:	08 95       	ret

00000aa2 <EXTI_VoidDisableINT1>:

void EXTI_VoidDisableINT1(void){
 aa2:	df 93       	push	r29
 aa4:	cf 93       	push	r28
 aa6:	cd b7       	in	r28, 0x3d	; 61
 aa8:	de b7       	in	r29, 0x3e	; 62

	ClrBit(GICR,GICR_INT1);
 aaa:	ab e5       	ldi	r26, 0x5B	; 91
 aac:	b0 e0       	ldi	r27, 0x00	; 0
 aae:	eb e5       	ldi	r30, 0x5B	; 91
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	80 81       	ld	r24, Z
 ab4:	8f 77       	andi	r24, 0x7F	; 127
 ab6:	8c 93       	st	X, r24

}
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	08 95       	ret

00000abe <EXTI_VoidDisableINT2>:

void EXTI_VoidDisableINT2(void){
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62

	ClrBit(GICR,GICR_INT2);
 ac6:	ab e5       	ldi	r26, 0x5B	; 91
 ac8:	b0 e0       	ldi	r27, 0x00	; 0
 aca:	eb e5       	ldi	r30, 0x5B	; 91
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	80 81       	ld	r24, Z
 ad0:	8f 7d       	andi	r24, 0xDF	; 223
 ad2:	8c 93       	st	X, r24

}
 ad4:	cf 91       	pop	r28
 ad6:	df 91       	pop	r29
 ad8:	08 95       	ret

00000ada <EXTI_VoidClrFlagInt0>:

void EXTI_VoidClrFlagInt0(void){
 ada:	df 93       	push	r29
 adc:	cf 93       	push	r28
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62

	SetBit(GIFR,GIFR_INTF0);
 ae2:	aa e5       	ldi	r26, 0x5A	; 90
 ae4:	b0 e0       	ldi	r27, 0x00	; 0
 ae6:	ea e5       	ldi	r30, 0x5A	; 90
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	80 64       	ori	r24, 0x40	; 64
 aee:	8c 93       	st	X, r24
}
 af0:	cf 91       	pop	r28
 af2:	df 91       	pop	r29
 af4:	08 95       	ret

00000af6 <EXTI_VoidClrFlagInt1>:

void EXTI_VoidClrFlagInt1(void){
 af6:	df 93       	push	r29
 af8:	cf 93       	push	r28
 afa:	cd b7       	in	r28, 0x3d	; 61
 afc:	de b7       	in	r29, 0x3e	; 62

	SetBit(GIFR,GIFR_INTF1);
 afe:	aa e5       	ldi	r26, 0x5A	; 90
 b00:	b0 e0       	ldi	r27, 0x00	; 0
 b02:	ea e5       	ldi	r30, 0x5A	; 90
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	80 81       	ld	r24, Z
 b08:	80 68       	ori	r24, 0x80	; 128
 b0a:	8c 93       	st	X, r24
}
 b0c:	cf 91       	pop	r28
 b0e:	df 91       	pop	r29
 b10:	08 95       	ret

00000b12 <EXTI_VoidClrFlagInt2>:

void EXTI_VoidClrFlagInt2(void){
 b12:	df 93       	push	r29
 b14:	cf 93       	push	r28
 b16:	cd b7       	in	r28, 0x3d	; 61
 b18:	de b7       	in	r29, 0x3e	; 62

	SetBit(GIFR,GIFR_INTF2);
 b1a:	aa e5       	ldi	r26, 0x5A	; 90
 b1c:	b0 e0       	ldi	r27, 0x00	; 0
 b1e:	ea e5       	ldi	r30, 0x5A	; 90
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	80 81       	ld	r24, Z
 b24:	80 62       	ori	r24, 0x20	; 32
 b26:	8c 93       	st	X, r24
}
 b28:	cf 91       	pop	r28
 b2a:	df 91       	pop	r29
 b2c:	08 95       	ret

00000b2e <EXTI_InitINT0>:


EXTI_Error_Status EXTI_InitINT0(u8 Copy_u8SenseState, void (*PtrCallBack)(void)){
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	00 d0       	rcall	.+0      	; 0xb34 <EXTI_InitINT0+0x6>
 b34:	00 d0       	rcall	.+0      	; 0xb36 <EXTI_InitINT0+0x8>
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	8a 83       	std	Y+2, r24	; 0x02
 b3c:	7c 83       	std	Y+4, r23	; 0x04
 b3e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Loc_Error_Status = EXTI_No_Error;
 b40:	19 82       	std	Y+1, r1	; 0x01

	if(PtrCallBack !=0){
 b42:	8b 81       	ldd	r24, Y+3	; 0x03
 b44:	9c 81       	ldd	r25, Y+4	; 0x04
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	39 f0       	breq	.+14     	; 0xb58 <EXTI_InitINT0+0x2a>
		EXTI_Ptr_CallBack_INT0 = PtrCallBack;
 b4a:	8b 81       	ldd	r24, Y+3	; 0x03
 b4c:	9c 81       	ldd	r25, Y+4	; 0x04
 b4e:	90 93 61 00 	sts	0x0061, r25
 b52:	80 93 60 00 	sts	0x0060, r24
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <EXTI_InitINT0+0x2e>
	}
	else {
		Loc_Error_Status = EXTI_PtrCallBack_Error;
 b58:	82 e0       	ldi	r24, 0x02	; 2
 b5a:	89 83       	std	Y+1, r24	; 0x01
	}


	EXTI_SensingStateINT0(Copy_u8SenseState);
 b5c:	8a 81       	ldd	r24, Y+2	; 0x02
 b5e:	0e 94 0d 04 	call	0x81a	; 0x81a <EXTI_SensingStateINT0>
	EXTI_VoidEnableINT0();
 b62:	0e 94 19 05 	call	0xa32	; 0xa32 <EXTI_VoidEnableINT0>

	return Loc_Error_Status;
 b66:	89 81       	ldd	r24, Y+1	; 0x01
}
 b68:	0f 90       	pop	r0
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	0f 90       	pop	r0
 b70:	cf 91       	pop	r28
 b72:	df 91       	pop	r29
 b74:	08 95       	ret

00000b76 <EXTI_InitINT1>:
EXTI_Error_Status EXTI_InitINT1(u8 Copy_u8SenseState, void (*PtrCallBack)(void)){
 b76:	df 93       	push	r29
 b78:	cf 93       	push	r28
 b7a:	00 d0       	rcall	.+0      	; 0xb7c <EXTI_InitINT1+0x6>
 b7c:	00 d0       	rcall	.+0      	; 0xb7e <EXTI_InitINT1+0x8>
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
 b82:	8a 83       	std	Y+2, r24	; 0x02
 b84:	7c 83       	std	Y+4, r23	; 0x04
 b86:	6b 83       	std	Y+3, r22	; 0x03

	u8 Loc_Error_Status = EXTI_No_Error;
 b88:	19 82       	std	Y+1, r1	; 0x01

	if(PtrCallBack !=0){
 b8a:	8b 81       	ldd	r24, Y+3	; 0x03
 b8c:	9c 81       	ldd	r25, Y+4	; 0x04
 b8e:	00 97       	sbiw	r24, 0x00	; 0
 b90:	39 f0       	breq	.+14     	; 0xba0 <EXTI_InitINT1+0x2a>
		EXTI_Ptr_CallBack_INT1 = PtrCallBack;
 b92:	8b 81       	ldd	r24, Y+3	; 0x03
 b94:	9c 81       	ldd	r25, Y+4	; 0x04
 b96:	90 93 63 00 	sts	0x0063, r25
 b9a:	80 93 62 00 	sts	0x0062, r24
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <EXTI_InitINT1+0x2e>
	}
	else {
		Loc_Error_Status = EXTI_PtrCallBack_Error;
 ba0:	82 e0       	ldi	r24, 0x02	; 2
 ba2:	89 83       	std	Y+1, r24	; 0x01
	}


	EXTI_SensingStateINT1(Copy_u8SenseState);
 ba4:	8a 81       	ldd	r24, Y+2	; 0x02
 ba6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <EXTI_SensingStateINT1>
	EXTI_VoidEnableINT1();
 baa:	0e 94 27 05 	call	0xa4e	; 0xa4e <EXTI_VoidEnableINT1>

	return Loc_Error_Status;
 bae:	89 81       	ldd	r24, Y+1	; 0x01
}
 bb0:	0f 90       	pop	r0
 bb2:	0f 90       	pop	r0
 bb4:	0f 90       	pop	r0
 bb6:	0f 90       	pop	r0
 bb8:	cf 91       	pop	r28
 bba:	df 91       	pop	r29
 bbc:	08 95       	ret

00000bbe <EXTI_InitINT2>:
EXTI_Error_Status EXTI_InitINT2(u8 Copy_u8SenseState, void (*PtrCallBack)(void)){
 bbe:	df 93       	push	r29
 bc0:	cf 93       	push	r28
 bc2:	00 d0       	rcall	.+0      	; 0xbc4 <EXTI_InitINT2+0x6>
 bc4:	00 d0       	rcall	.+0      	; 0xbc6 <EXTI_InitINT2+0x8>
 bc6:	cd b7       	in	r28, 0x3d	; 61
 bc8:	de b7       	in	r29, 0x3e	; 62
 bca:	8a 83       	std	Y+2, r24	; 0x02
 bcc:	7c 83       	std	Y+4, r23	; 0x04
 bce:	6b 83       	std	Y+3, r22	; 0x03

	u8 Loc_Error_Status = EXTI_No_Error;
 bd0:	19 82       	std	Y+1, r1	; 0x01

	if(PtrCallBack !=0){
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	9c 81       	ldd	r25, Y+4	; 0x04
 bd6:	00 97       	sbiw	r24, 0x00	; 0
 bd8:	39 f0       	breq	.+14     	; 0xbe8 <EXTI_InitINT2+0x2a>
		EXTI_Ptr_CallBack_INT2 = PtrCallBack;
 bda:	8b 81       	ldd	r24, Y+3	; 0x03
 bdc:	9c 81       	ldd	r25, Y+4	; 0x04
 bde:	90 93 65 00 	sts	0x0065, r25
 be2:	80 93 64 00 	sts	0x0064, r24
 be6:	02 c0       	rjmp	.+4      	; 0xbec <EXTI_InitINT2+0x2e>
	}
	else {
		Loc_Error_Status = EXTI_PtrCallBack_Error;
 be8:	82 e0       	ldi	r24, 0x02	; 2
 bea:	89 83       	std	Y+1, r24	; 0x01
	}


	EXTI_SensingStateINT1(Copy_u8SenseState);
 bec:	8a 81       	ldd	r24, Y+2	; 0x02
 bee:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <EXTI_SensingStateINT1>
	EXTI_VoidEnableINT2();
 bf2:	0e 94 35 05 	call	0xa6a	; 0xa6a <EXTI_VoidEnableINT2>

	return Loc_Error_Status;
 bf6:	89 81       	ldd	r24, Y+1	; 0x01
}
 bf8:	0f 90       	pop	r0
 bfa:	0f 90       	pop	r0
 bfc:	0f 90       	pop	r0
 bfe:	0f 90       	pop	r0
 c00:	cf 91       	pop	r28
 c02:	df 91       	pop	r29
 c04:	08 95       	ret

00000c06 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 c06:	1f 92       	push	r1
 c08:	0f 92       	push	r0
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	0f 92       	push	r0
 c0e:	11 24       	eor	r1, r1
 c10:	2f 93       	push	r18
 c12:	3f 93       	push	r19
 c14:	4f 93       	push	r20
 c16:	5f 93       	push	r21
 c18:	6f 93       	push	r22
 c1a:	7f 93       	push	r23
 c1c:	8f 93       	push	r24
 c1e:	9f 93       	push	r25
 c20:	af 93       	push	r26
 c22:	bf 93       	push	r27
 c24:	ef 93       	push	r30
 c26:	ff 93       	push	r31
 c28:	df 93       	push	r29
 c2a:	cf 93       	push	r28
 c2c:	cd b7       	in	r28, 0x3d	; 61
 c2e:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_Ptr_CallBack_INT0 != NULL){
 c30:	80 91 60 00 	lds	r24, 0x0060
 c34:	90 91 61 00 	lds	r25, 0x0061
 c38:	00 97       	sbiw	r24, 0x00	; 0
 c3a:	29 f0       	breq	.+10     	; 0xc46 <__vector_1+0x40>
		EXTI_Ptr_CallBack_INT0();
 c3c:	e0 91 60 00 	lds	r30, 0x0060
 c40:	f0 91 61 00 	lds	r31, 0x0061
 c44:	09 95       	icall
	}
}
 c46:	cf 91       	pop	r28
 c48:	df 91       	pop	r29
 c4a:	ff 91       	pop	r31
 c4c:	ef 91       	pop	r30
 c4e:	bf 91       	pop	r27
 c50:	af 91       	pop	r26
 c52:	9f 91       	pop	r25
 c54:	8f 91       	pop	r24
 c56:	7f 91       	pop	r23
 c58:	6f 91       	pop	r22
 c5a:	5f 91       	pop	r21
 c5c:	4f 91       	pop	r20
 c5e:	3f 91       	pop	r19
 c60:	2f 91       	pop	r18
 c62:	0f 90       	pop	r0
 c64:	0f be       	out	0x3f, r0	; 63
 c66:	0f 90       	pop	r0
 c68:	1f 90       	pop	r1
 c6a:	18 95       	reti

00000c6c <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 c6c:	1f 92       	push	r1
 c6e:	0f 92       	push	r0
 c70:	0f b6       	in	r0, 0x3f	; 63
 c72:	0f 92       	push	r0
 c74:	11 24       	eor	r1, r1
 c76:	2f 93       	push	r18
 c78:	3f 93       	push	r19
 c7a:	4f 93       	push	r20
 c7c:	5f 93       	push	r21
 c7e:	6f 93       	push	r22
 c80:	7f 93       	push	r23
 c82:	8f 93       	push	r24
 c84:	9f 93       	push	r25
 c86:	af 93       	push	r26
 c88:	bf 93       	push	r27
 c8a:	ef 93       	push	r30
 c8c:	ff 93       	push	r31
 c8e:	df 93       	push	r29
 c90:	cf 93       	push	r28
 c92:	cd b7       	in	r28, 0x3d	; 61
 c94:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_Ptr_CallBack_INT1 != NULL){
 c96:	80 91 62 00 	lds	r24, 0x0062
 c9a:	90 91 63 00 	lds	r25, 0x0063
 c9e:	00 97       	sbiw	r24, 0x00	; 0
 ca0:	29 f0       	breq	.+10     	; 0xcac <__vector_2+0x40>
		EXTI_Ptr_CallBack_INT1();
 ca2:	e0 91 62 00 	lds	r30, 0x0062
 ca6:	f0 91 63 00 	lds	r31, 0x0063
 caa:	09 95       	icall
	}
}
 cac:	cf 91       	pop	r28
 cae:	df 91       	pop	r29
 cb0:	ff 91       	pop	r31
 cb2:	ef 91       	pop	r30
 cb4:	bf 91       	pop	r27
 cb6:	af 91       	pop	r26
 cb8:	9f 91       	pop	r25
 cba:	8f 91       	pop	r24
 cbc:	7f 91       	pop	r23
 cbe:	6f 91       	pop	r22
 cc0:	5f 91       	pop	r21
 cc2:	4f 91       	pop	r20
 cc4:	3f 91       	pop	r19
 cc6:	2f 91       	pop	r18
 cc8:	0f 90       	pop	r0
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	0f 90       	pop	r0
 cce:	1f 90       	pop	r1
 cd0:	18 95       	reti

00000cd2 <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 cd2:	1f 92       	push	r1
 cd4:	0f 92       	push	r0
 cd6:	0f b6       	in	r0, 0x3f	; 63
 cd8:	0f 92       	push	r0
 cda:	11 24       	eor	r1, r1
 cdc:	2f 93       	push	r18
 cde:	3f 93       	push	r19
 ce0:	4f 93       	push	r20
 ce2:	5f 93       	push	r21
 ce4:	6f 93       	push	r22
 ce6:	7f 93       	push	r23
 ce8:	8f 93       	push	r24
 cea:	9f 93       	push	r25
 cec:	af 93       	push	r26
 cee:	bf 93       	push	r27
 cf0:	ef 93       	push	r30
 cf2:	ff 93       	push	r31
 cf4:	df 93       	push	r29
 cf6:	cf 93       	push	r28
 cf8:	cd b7       	in	r28, 0x3d	; 61
 cfa:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_Ptr_CallBack_INT2 != NULL){
 cfc:	80 91 64 00 	lds	r24, 0x0064
 d00:	90 91 65 00 	lds	r25, 0x0065
 d04:	00 97       	sbiw	r24, 0x00	; 0
 d06:	29 f0       	breq	.+10     	; 0xd12 <__vector_3+0x40>
		EXTI_Ptr_CallBack_INT2();
 d08:	e0 91 64 00 	lds	r30, 0x0064
 d0c:	f0 91 65 00 	lds	r31, 0x0065
 d10:	09 95       	icall
	}
}
 d12:	cf 91       	pop	r28
 d14:	df 91       	pop	r29
 d16:	ff 91       	pop	r31
 d18:	ef 91       	pop	r30
 d1a:	bf 91       	pop	r27
 d1c:	af 91       	pop	r26
 d1e:	9f 91       	pop	r25
 d20:	8f 91       	pop	r24
 d22:	7f 91       	pop	r23
 d24:	6f 91       	pop	r22
 d26:	5f 91       	pop	r21
 d28:	4f 91       	pop	r20
 d2a:	3f 91       	pop	r19
 d2c:	2f 91       	pop	r18
 d2e:	0f 90       	pop	r0
 d30:	0f be       	out	0x3f, r0	; 63
 d32:	0f 90       	pop	r0
 d34:	1f 90       	pop	r1
 d36:	18 95       	reti

00000d38 <GI_VidEnableGlobalInterrupt>:
#include "GI_INTERFACE.h"
#include "BITMATH.h"
#include "REGISTERS.h"


void GI_VidEnableGlobalInterrupt(void){
 d38:	df 93       	push	r29
 d3a:	cf 93       	push	r28
 d3c:	cd b7       	in	r28, 0x3d	; 61
 d3e:	de b7       	in	r29, 0x3e	; 62

	SetBit(SREG,SREG_I);
 d40:	af e5       	ldi	r26, 0x5F	; 95
 d42:	b0 e0       	ldi	r27, 0x00	; 0
 d44:	ef e5       	ldi	r30, 0x5F	; 95
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	80 81       	ld	r24, Z
 d4a:	80 68       	ori	r24, 0x80	; 128
 d4c:	8c 93       	st	X, r24
}
 d4e:	cf 91       	pop	r28
 d50:	df 91       	pop	r29
 d52:	08 95       	ret

00000d54 <GI_VidDisableGlobalInterrupt>:

void GI_VidDisableGlobalInterrupt(void){
 d54:	df 93       	push	r29
 d56:	cf 93       	push	r28
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62

	ClrBit(SREG,SREG_I);
 d5c:	af e5       	ldi	r26, 0x5F	; 95
 d5e:	b0 e0       	ldi	r27, 0x00	; 0
 d60:	ef e5       	ldi	r30, 0x5F	; 95
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	80 81       	ld	r24, Z
 d66:	8f 77       	andi	r24, 0x7F	; 127
 d68:	8c 93       	st	X, r24
}
 d6a:	cf 91       	pop	r28
 d6c:	df 91       	pop	r29
 d6e:	08 95       	ret

00000d70 <_exit>:
 d70:	f8 94       	cli

00000d72 <__stop_program>:
 d72:	ff cf       	rjmp	.-2      	; 0xd72 <__stop_program>
